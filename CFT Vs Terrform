
CloudFormation (CFN) and Terraform (CF) are both Infrastructure as Code (IaC) development tools.

However, CFN is only for AWS. You can't use it with Azure, GCP or anything else outside of AWS ecosystem. In contrast, TF is cloud agnostic. You can use it across not only multiple cloud providers, but also to work with non-cloud products, such as docker, various databases and even domino pizza if you want.

So the main advantage of TF is that once you learn it only once, you can apply it to a number of cloud providers. CFN is only useful in AWS, and once you stop using CFN, you have to learn something new to work with other cloud.

There are also difference in how TF and CFN work. Both have their strengths and weekends. For example:

when you deploy using CFN all resources are available to view in one central location in AWS along with template's source code. Whereas with TF there is no such place. If you login to the AWS console, you have no idea what was created by TF, what was the source code used, etc.

TF has loops and complex data structures and condtions, while CFN does not.

CFN has creation policies and update policies, TF has not.

You can control access to CFN using CFN policies and IAM policies. You can't do same with TF as it "lives" outside of AWS.
